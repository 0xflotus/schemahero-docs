{"componentChunkName":"component---node-modules-gatsby-theme-apollo-docs-src-components-template-js","path":"/declarative-schema-management/","result":{"data":{"site":{"pathPrefix":"/learn","siteMetadata":{"title":"Learn SchemaHero","description":"Learn SchemaHero"}},"file":{"childMarkdownRemark":{"frontmatter":{"title":"Declarative Schema Management","description":"An explanation of the declarative schema management concept"},"headings":[],"fields":{"image":"social-cards/declarative-schema-management.png","graphManagerUrl":""},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Many database schema management tools create an imperative interface, requiring the developer to understand both the current state of the schema and the optimal commands to migrate the current schema (and related data) to a new, desired schema.\nThis model is difficult for several reaasons that are covered in this document.\nThis document proposes a declarative interface to replace this traditionally imperative one, and explains the benefits and challenges with this change."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are many benefits to managing database schemas in a declarive format, including:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Ability to adhere to a change management process"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Repeatable deployments to new environments"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Compatibility with unexpected and new runtimes"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"define-the-current-state-only","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#define-the-current-state-only","ariaLabel":"define the current state only permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Define the current state only"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In a declarative model, only the current state of the schema is defined.\nThe declarative schema management application is responsible for producing the commands necessary to migrate the schema from any previous state to the desired state,\nA benefit of only storing the current state is that previously used datbase extensions, tables and features will not be required when creating a new environment or instance."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"no-need-to-learn-ddl-data-definition-language","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#no-need-to-learn-ddl-data-definition-language","ariaLabel":"no need to learn ddl data definition language permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"No need to learn DDL (Data Definition Language)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Traditional database engines receive schema changes through a subset of SQL statements known as DDL (Data Definition Language).\nDevelopers should not need to learn the nuances of the DDL for every database engine they are targeting.\nConverting from a unified, declarative model to the appropriate DDL commands based on the capabilities and state of the database can be handled programatically."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"policies-and-best-practices","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#policies-and-best-practices","ariaLabel":"policies and best practices permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Policies and best practices"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When a declarative pattern to define database schema management is adopted, it becomes possible to validate schemas against a set of policies before application.\nThis is not easily possible with imperative tools that only store migration scripts.\nWith the full desired state available, the database schema can be evaluated against a set of rules to ensure that policies and ebst practices are enforced."}]}],"data":{"quirksMode":false}}},"childMdx":null}},"pageContext":{"id":"9b803a50-2a3a-574e-8228-d54c22b3d95d","subtitle":"Learn SchemaHero","versionDifference":0,"versionBasePath":"/vdefault","sidebarContents":[{"title":null,"pages":[{"title":"Learning SchemaHero","description":"Learning SchemaHero","path":"/"},{"title":"Declarative Schema Management","description":"An explanation of the declarative schema management concept","path":"/declarative-schema-management/"},{"title":"Data Migrations","description":"Comparing Data and Schema Migrations","path":"/data-migrations/"}]},{"title":"Tutorial","pages":[{"title":"Introduction","description":"Start here to understand the SchemaHero tutorial","path":"/tutorial/introduction/"},{"title":"Install SchemaHero","description":"Learn how to install the SchemaHero kubectl plugin and the in-cluster Operator","path":"/tutorial/install-schemahero/"},{"title":"Connect A Database","description":"Learn how to configure SchemaHero to manage a database","path":"/tutorial/connect-database/"},{"title":"Create A New Table","description":"Learn how to create a new table using SchemaHero","path":"/tutorial/create-table/"},{"title":"Modify Table","description":"Modify Table","path":"/tutorial/modify-table/"},{"title":"Next Steps","description":"Next Steps","path":"/tutorial/next-steps/"}]},{"title":"Comparisons","pages":[{"title":"Sequential Migrations","description":"Comparing SchemaHero's declarative model to sequence migrations","path":"/comparisons/sequential-migrations/"},{"title":"ORM","description":"Comparing SchemaHero to an ORM (Object Relational Mapper)","path":"/comparisons/orm/"}]}],"githubUrl":"https://github.com/schemahero/schemahero/tree/master/learn/source/declarative-schema-management.md","twitterHandle":"schemahero","versions":[],"defaultVersion":"default","baseUrl":"https://schemahero.io"}}}